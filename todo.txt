pip install -U openmim
mim install mmcv-full
git clone https://github.com/open-mmlab/mmpose.git
cd mmpose
pip install -r requirements.txt
pip install -v -e .
# "-v" means verbose, or more output
# "-e" means installing a project in editable mode,
# thus any local modifications made to the code will take effect without reinstallation.
pip install mmpose
python demo/top_down_img_demo.py \
    configs/face/2d_kpt_sview_rgb_img/topdown_heatmap/aflw/hrnetv2_w18_aflw_256x256.py \
    https://download.openmmlab.com/mmpose/face/hrnetv2/hrnetv2_w18_aflw_256x256-f2bbc62b_20210125.pth \
    --img-root tests/data/aflw/ --json-file tests/data/aflw/test_aflw.json \
    --out-img-root vis_results
top_down_img_demo.py  - разобрать
++++++++++++++


СКРИПТ ДЛЯ 1 ФОТКИ + тензор координат

python3 demo/face_img_demo.py     configs/face/2d_kpt_sview_rgb_img/topdown_heatmap/aflw/hrnetv2_w18_aflw_256x256.py     https://download.openmmlab.com/mmpose/face/hrnetv2/hrnetv2_w18_aflw_256x256-f2bbc62b_20210125.pth     --img-root tests/data/aflw/     --img 0.jpeg --out-img-root vis_results


import os
import warnings
import numpy as np
from mmpose.apis import (inference_top_down_pose_model, init_pose_model,
                         vis_pose_result)
from mmpose.datasets import DatasetInfo

try:
    import face_recognition
    has_face_det = True
except (ImportError, ModuleNotFoundError):
    has_face_det = False

def process_face_det_results(face_det_results):
    """Process det results, and return a list of bboxes.

    :param face_det_results: (top, right, bottom and left)
    :return: a list of detected bounding boxes (x,y,x,y)-format
    """

    person_results = []
    for bbox in face_det_results:
        person = {}
        # left, top, right, bottom
        person['bbox'] = [bbox[3], bbox[0], bbox[1], bbox[2]]
        person_results.append(person)

    return person_results

pose_config_file = "./mmpose/configs/face/2d_kpt_sview_rgb_img/topdown_heatmap/aflw/hrnetv2_w18_aflw_256x256.py"
pose_checkpoint_file = "./mmpose/input/hrnetv2_w18_aflw_256x256-f2bbc62b_20210125.pth"
img_root = "./mmpose/tests/data/aflw/"
img_name = "3.jpg"

pose_model = init_pose_model(pose_config_file, pose_checkpoint_file, device='cuda:0')

dataset = pose_model.cfg.data['test']['type']
dataset_info = pose_model.cfg.data['test'].get('dataset_info', None)
if dataset_info is None:
    warnings.warn(
        'Please set `dataset_info` in the config.'
        'Check https://github.com/open-mmlab/mmpose/pull/663 for details.',
        DeprecationWarning)
else:
    dataset_info = DatasetInfo(dataset_info)

image_name = os.path.join(img_root, img_name)
image = face_recognition.load_image_file(image_name)
face_det_results = face_recognition.face_locations(image)
face_results = process_face_det_results(face_det_results)

return_heatmap = False

    # e.g. use ('backbone', ) to return backbone feature
output_layer_names = None

pose_results, returned_outputs = inference_top_down_pose_model(
        pose_model,
        image_name,
        face_results,
        bbox_thr=None,
        format='xyxy',
        dataset=dataset,
        dataset_info=dataset_info,
        return_heatmap=return_heatmap,
        outputs=output_layer_names)
    
keypoints_path = r'./mmpose/vis_results'
keypoints_file_name = img_name.split('.')[0]
np.save(f'{keypoints_path}/{keypoints_file_name}.npy', pose_results[0]['keypoints'])
